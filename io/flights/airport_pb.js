// source: io/flights/airport.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var io_common_localization_pb = require('../../io/common/localization_pb.js');
goog.object.extend(proto, io_common_localization_pb);
goog.exportSymbol('proto.flights.AirportCode', null, global);
goog.exportSymbol('proto.flights.Port', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flights.Port = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.flights.Port, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.flights.Port.displayName = 'proto.flights.Port';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flights.AirportCode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.flights.AirportCode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.flights.AirportCode.displayName = 'proto.flights.AirportCode';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flights.Port.prototype.toObject = function(opt_includeInstance) {
  return proto.flights.Port.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flights.Port} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flights.Port.toObject = function(includeInstance, msg) {
  var f, obj = {
    iataairportcode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    icaoairportcode: jspb.Message.getFieldWithDefault(msg, 2, ""),
    cityname: jspb.Message.getFieldWithDefault(msg, 3, ""),
    localizedcityname: (f = msg.getLocalizedcityname()) && io_common_localization_pb.LocalizedString.toObject(includeInstance, f),
    airportname: jspb.Message.getFieldWithDefault(msg, 5, ""),
    localizedairportname: (f = msg.getLocalizedairportname()) && io_common_localization_pb.LocalizedString.toObject(includeInstance, f),
    countrycode: jspb.Message.getFieldWithDefault(msg, 7, ""),
    timezone: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flights.Port}
 */
proto.flights.Port.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flights.Port;
  return proto.flights.Port.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flights.Port} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flights.Port}
 */
proto.flights.Port.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIataairportcode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIcaoairportcode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCityname(value);
      break;
    case 4:
      var value = new io_common_localization_pb.LocalizedString;
      reader.readMessage(value,io_common_localization_pb.LocalizedString.deserializeBinaryFromReader);
      msg.setLocalizedcityname(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAirportname(value);
      break;
    case 6:
      var value = new io_common_localization_pb.LocalizedString;
      reader.readMessage(value,io_common_localization_pb.LocalizedString.deserializeBinaryFromReader);
      msg.setLocalizedairportname(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountrycode(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimezone(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flights.Port.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flights.Port.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flights.Port} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flights.Port.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIataairportcode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIcaoairportcode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCityname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLocalizedcityname();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      io_common_localization_pb.LocalizedString.serializeBinaryToWriter
    );
  }
  f = message.getAirportname();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getLocalizedairportname();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      io_common_localization_pb.LocalizedString.serializeBinaryToWriter
    );
  }
  f = message.getCountrycode();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getTimezone();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string iataAirportCode = 1;
 * @return {string}
 */
proto.flights.Port.prototype.getIataairportcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.flights.Port} returns this
 */
proto.flights.Port.prototype.setIataairportcode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string icaoAirportCode = 2;
 * @return {string}
 */
proto.flights.Port.prototype.getIcaoairportcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.flights.Port} returns this
 */
proto.flights.Port.prototype.setIcaoairportcode = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string cityName = 3;
 * @return {string}
 */
proto.flights.Port.prototype.getCityname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.flights.Port} returns this
 */
proto.flights.Port.prototype.setCityname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional io.LocalizedString localizedCityName = 4;
 * @return {?proto.io.LocalizedString}
 */
proto.flights.Port.prototype.getLocalizedcityname = function() {
  return /** @type{?proto.io.LocalizedString} */ (
    jspb.Message.getWrapperField(this, io_common_localization_pb.LocalizedString, 4));
};


/**
 * @param {?proto.io.LocalizedString|undefined} value
 * @return {!proto.flights.Port} returns this
*/
proto.flights.Port.prototype.setLocalizedcityname = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.flights.Port} returns this
 */
proto.flights.Port.prototype.clearLocalizedcityname = function() {
  return this.setLocalizedcityname(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.flights.Port.prototype.hasLocalizedcityname = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string airportName = 5;
 * @return {string}
 */
proto.flights.Port.prototype.getAirportname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.flights.Port} returns this
 */
proto.flights.Port.prototype.setAirportname = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional io.LocalizedString localizedAirportName = 6;
 * @return {?proto.io.LocalizedString}
 */
proto.flights.Port.prototype.getLocalizedairportname = function() {
  return /** @type{?proto.io.LocalizedString} */ (
    jspb.Message.getWrapperField(this, io_common_localization_pb.LocalizedString, 6));
};


/**
 * @param {?proto.io.LocalizedString|undefined} value
 * @return {!proto.flights.Port} returns this
*/
proto.flights.Port.prototype.setLocalizedairportname = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.flights.Port} returns this
 */
proto.flights.Port.prototype.clearLocalizedairportname = function() {
  return this.setLocalizedairportname(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.flights.Port.prototype.hasLocalizedairportname = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string countryCode = 7;
 * @return {string}
 */
proto.flights.Port.prototype.getCountrycode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.flights.Port} returns this
 */
proto.flights.Port.prototype.setCountrycode = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string timezone = 8;
 * @return {string}
 */
proto.flights.Port.prototype.getTimezone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.flights.Port} returns this
 */
proto.flights.Port.prototype.setTimezone = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flights.AirportCode.prototype.toObject = function(opt_includeInstance) {
  return proto.flights.AirportCode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flights.AirportCode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flights.AirportCode.toObject = function(includeInstance, msg) {
  var f, obj = {
    airportcode: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flights.AirportCode}
 */
proto.flights.AirportCode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flights.AirportCode;
  return proto.flights.AirportCode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flights.AirportCode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flights.AirportCode}
 */
proto.flights.AirportCode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAirportcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flights.AirportCode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flights.AirportCode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flights.AirportCode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flights.AirportCode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAirportcode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string airportCode = 1;
 * @return {string}
 */
proto.flights.AirportCode.prototype.getAirportcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.flights.AirportCode} returns this
 */
proto.flights.AirportCode.prototype.setAirportcode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.flights);
