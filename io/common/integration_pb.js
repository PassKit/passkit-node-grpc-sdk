// source: io/common/integration.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var io_common_pass_pb = require('../../io/common/pass_pb.js');
goog.object.extend(proto, io_common_pass_pb);
var io_common_template_pb = require('../../io/common/template_pb.js');
goog.object.extend(proto, io_common_template_pb);
var io_common_protocols_pb = require('../../io/common/protocols_pb.js');
goog.object.extend(proto, io_common_protocols_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.io.ActionMethod', null, global);
goog.exportSymbol('proto.io.ConfigurationType', null, global);
goog.exportSymbol('proto.io.CouponEventId', null, global);
goog.exportSymbol('proto.io.CouponEventIds', null, global);
goog.exportSymbol('proto.io.DynamicApiInput', null, global);
goog.exportSymbol('proto.io.DynamicApiRequest', null, global);
goog.exportSymbol('proto.io.DynamicApiResponse', null, global);
goog.exportSymbol('proto.io.FieldMapping', null, global);
goog.exportSymbol('proto.io.IntegrationConfigs', null, global);
goog.exportSymbol('proto.io.IntegrationStatus', null, global);
goog.exportSymbol('proto.io.IntegrationType', null, global);
goog.exportSymbol('proto.io.MembershipEventId', null, global);
goog.exportSymbol('proto.io.MembershipEventIds', null, global);
goog.exportSymbol('proto.io.PassEventId', null, global);
goog.exportSymbol('proto.io.ProtocolIdInput', null, global);
goog.exportSymbol('proto.io.ProtocolIntgType', null, global);
goog.exportSymbol('proto.io.SinkSubscription', null, global);
goog.exportSymbol('proto.io.SinkSubscription.ProtocoleventidCase', null, global);
goog.exportSymbol('proto.io.SinkSubscriptionPayload', null, global);
goog.exportSymbol('proto.io.SubscriptionRequest', null, global);
goog.exportSymbol('proto.io.SubscriptionRequestByClassId', null, global);
goog.exportSymbol('proto.io.SubscriptionRequestByClassId.EventidCase', null, global);
goog.exportSymbol('proto.io.WebhookConfig', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.MembershipEventIds = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.MembershipEventIds.repeatedFields_, null);
};
goog.inherits(proto.io.MembershipEventIds, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.MembershipEventIds.displayName = 'proto.io.MembershipEventIds';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.CouponEventIds = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.CouponEventIds.repeatedFields_, null);
};
goog.inherits(proto.io.CouponEventIds, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.CouponEventIds.displayName = 'proto.io.CouponEventIds';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.IntegrationConfigs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.IntegrationConfigs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.IntegrationConfigs.displayName = 'proto.io.IntegrationConfigs';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.ProtocolIdInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.ProtocolIdInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.ProtocolIdInput.displayName = 'proto.io.ProtocolIdInput';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.SubscriptionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.SubscriptionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.SubscriptionRequest.displayName = 'proto.io.SubscriptionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.SubscriptionRequestByClassId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.io.SubscriptionRequestByClassId.oneofGroups_);
};
goog.inherits(proto.io.SubscriptionRequestByClassId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.SubscriptionRequestByClassId.displayName = 'proto.io.SubscriptionRequestByClassId';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.FieldMapping = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.FieldMapping, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.FieldMapping.displayName = 'proto.io.FieldMapping';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.WebhookConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.WebhookConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.WebhookConfig.displayName = 'proto.io.WebhookConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.SinkSubscriptionPayload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.SinkSubscriptionPayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.SinkSubscriptionPayload.displayName = 'proto.io.SinkSubscriptionPayload';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.SinkSubscription = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.SinkSubscription.repeatedFields_, proto.io.SinkSubscription.oneofGroups_);
};
goog.inherits(proto.io.SinkSubscription, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.SinkSubscription.displayName = 'proto.io.SinkSubscription';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.DynamicApiInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.DynamicApiInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.DynamicApiInput.displayName = 'proto.io.DynamicApiInput';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.DynamicApiRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.DynamicApiRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.DynamicApiRequest.displayName = 'proto.io.DynamicApiRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.DynamicApiResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.DynamicApiResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.DynamicApiResponse.displayName = 'proto.io.DynamicApiResponse';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.MembershipEventIds.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.MembershipEventIds.prototype.toObject = function(opt_includeInstance) {
  return proto.io.MembershipEventIds.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.MembershipEventIds} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.MembershipEventIds.toObject = function(includeInstance, msg) {
  var f, obj = {
    idsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.MembershipEventIds}
 */
proto.io.MembershipEventIds.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.MembershipEventIds;
  return proto.io.MembershipEventIds.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.MembershipEventIds} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.MembershipEventIds}
 */
proto.io.MembershipEventIds.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<!proto.io.MembershipEventId>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addIds(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.MembershipEventIds.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.MembershipEventIds.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.MembershipEventIds} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.MembershipEventIds.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      1,
      f
    );
  }
};


/**
 * repeated MembershipEventId ids = 1;
 * @return {!Array<!proto.io.MembershipEventId>}
 */
proto.io.MembershipEventIds.prototype.getIdsList = function() {
  return /** @type {!Array<!proto.io.MembershipEventId>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<!proto.io.MembershipEventId>} value
 * @return {!proto.io.MembershipEventIds} returns this
 */
proto.io.MembershipEventIds.prototype.setIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!proto.io.MembershipEventId} value
 * @param {number=} opt_index
 * @return {!proto.io.MembershipEventIds} returns this
 */
proto.io.MembershipEventIds.prototype.addIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.io.MembershipEventIds} returns this
 */
proto.io.MembershipEventIds.prototype.clearIdsList = function() {
  return this.setIdsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.CouponEventIds.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.CouponEventIds.prototype.toObject = function(opt_includeInstance) {
  return proto.io.CouponEventIds.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.CouponEventIds} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.CouponEventIds.toObject = function(includeInstance, msg) {
  var f, obj = {
    idsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.CouponEventIds}
 */
proto.io.CouponEventIds.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.CouponEventIds;
  return proto.io.CouponEventIds.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.CouponEventIds} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.CouponEventIds}
 */
proto.io.CouponEventIds.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<!proto.io.CouponEventId>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addIds(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.CouponEventIds.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.CouponEventIds.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.CouponEventIds} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.CouponEventIds.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      1,
      f
    );
  }
};


/**
 * repeated CouponEventId ids = 1;
 * @return {!Array<!proto.io.CouponEventId>}
 */
proto.io.CouponEventIds.prototype.getIdsList = function() {
  return /** @type {!Array<!proto.io.CouponEventId>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<!proto.io.CouponEventId>} value
 * @return {!proto.io.CouponEventIds} returns this
 */
proto.io.CouponEventIds.prototype.setIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!proto.io.CouponEventId} value
 * @param {number=} opt_index
 * @return {!proto.io.CouponEventIds} returns this
 */
proto.io.CouponEventIds.prototype.addIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.io.CouponEventIds} returns this
 */
proto.io.CouponEventIds.prototype.clearIdsList = function() {
  return this.setIdsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.IntegrationConfigs.prototype.toObject = function(opt_includeInstance) {
  return proto.io.IntegrationConfigs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.IntegrationConfigs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.IntegrationConfigs.toObject = function(includeInstance, msg) {
  var f, obj = {
    classid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    configurationsMap: (f = msg.getConfigurationsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.IntegrationConfigs}
 */
proto.io.IntegrationConfigs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.IntegrationConfigs;
  return proto.io.IntegrationConfigs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.IntegrationConfigs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.IntegrationConfigs}
 */
proto.io.IntegrationConfigs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClassid(value);
      break;
    case 2:
      var value = msg.getConfigurationsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readString, null, 0, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.IntegrationConfigs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.IntegrationConfigs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.IntegrationConfigs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.IntegrationConfigs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClassid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getConfigurationsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string classId = 1;
 * @return {string}
 */
proto.io.IntegrationConfigs.prototype.getClassid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.IntegrationConfigs} returns this
 */
proto.io.IntegrationConfigs.prototype.setClassid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * map<int32, string> configurations = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,string>}
 */
proto.io.IntegrationConfigs.prototype.getConfigurationsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,string>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.io.IntegrationConfigs} returns this
 */
proto.io.IntegrationConfigs.prototype.clearConfigurationsMap = function() {
  this.getConfigurationsMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.ProtocolIdInput.prototype.toObject = function(opt_includeInstance) {
  return proto.io.ProtocolIdInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.ProtocolIdInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.ProtocolIdInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    protocol: jspb.Message.getFieldWithDefault(msg, 1, 0),
    classid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.ProtocolIdInput}
 */
proto.io.ProtocolIdInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.ProtocolIdInput;
  return proto.io.ProtocolIdInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.ProtocolIdInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.ProtocolIdInput}
 */
proto.io.ProtocolIdInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.io.PassProtocol} */ (reader.readEnum());
      msg.setProtocol(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClassid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.ProtocolIdInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.ProtocolIdInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.ProtocolIdInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.ProtocolIdInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProtocol();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getClassid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional PassProtocol protocol = 1;
 * @return {!proto.io.PassProtocol}
 */
proto.io.ProtocolIdInput.prototype.getProtocol = function() {
  return /** @type {!proto.io.PassProtocol} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.io.PassProtocol} value
 * @return {!proto.io.ProtocolIdInput} returns this
 */
proto.io.ProtocolIdInput.prototype.setProtocol = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string classId = 2;
 * @return {string}
 */
proto.io.ProtocolIdInput.prototype.getClassid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.ProtocolIdInput} returns this
 */
proto.io.ProtocolIdInput.prototype.setClassid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.SubscriptionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.io.SubscriptionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.SubscriptionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.SubscriptionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    protocol: jspb.Message.getFieldWithDefault(msg, 1, 0),
    subscriptionid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.SubscriptionRequest}
 */
proto.io.SubscriptionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.SubscriptionRequest;
  return proto.io.SubscriptionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.SubscriptionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.SubscriptionRequest}
 */
proto.io.SubscriptionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.io.PassProtocol} */ (reader.readEnum());
      msg.setProtocol(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubscriptionid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.SubscriptionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.SubscriptionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.SubscriptionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.SubscriptionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProtocol();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getSubscriptionid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional PassProtocol protocol = 1;
 * @return {!proto.io.PassProtocol}
 */
proto.io.SubscriptionRequest.prototype.getProtocol = function() {
  return /** @type {!proto.io.PassProtocol} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.io.PassProtocol} value
 * @return {!proto.io.SubscriptionRequest} returns this
 */
proto.io.SubscriptionRequest.prototype.setProtocol = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string subscriptionId = 2;
 * @return {string}
 */
proto.io.SubscriptionRequest.prototype.getSubscriptionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.SubscriptionRequest} returns this
 */
proto.io.SubscriptionRequest.prototype.setSubscriptionid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.io.SubscriptionRequestByClassId.oneofGroups_ = [[4,5,6]];

/**
 * @enum {number}
 */
proto.io.SubscriptionRequestByClassId.EventidCase = {
  EVENTID_NOT_SET: 0,
  PASSEVENTID: 4,
  MEMBERSHIPEVENTID: 5,
  COUPONEVENTID: 6
};

/**
 * @return {proto.io.SubscriptionRequestByClassId.EventidCase}
 */
proto.io.SubscriptionRequestByClassId.prototype.getEventidCase = function() {
  return /** @type {proto.io.SubscriptionRequestByClassId.EventidCase} */(jspb.Message.computeOneofCase(this, proto.io.SubscriptionRequestByClassId.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.SubscriptionRequestByClassId.prototype.toObject = function(opt_includeInstance) {
  return proto.io.SubscriptionRequestByClassId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.SubscriptionRequestByClassId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.SubscriptionRequestByClassId.toObject = function(includeInstance, msg) {
  var f, obj = {
    protocol: jspb.Message.getFieldWithDefault(msg, 1, 0),
    classid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    configtype: jspb.Message.getFieldWithDefault(msg, 3, 0),
    passeventid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    membershipeventid: jspb.Message.getFieldWithDefault(msg, 5, 0),
    couponeventid: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.SubscriptionRequestByClassId}
 */
proto.io.SubscriptionRequestByClassId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.SubscriptionRequestByClassId;
  return proto.io.SubscriptionRequestByClassId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.SubscriptionRequestByClassId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.SubscriptionRequestByClassId}
 */
proto.io.SubscriptionRequestByClassId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.io.PassProtocol} */ (reader.readEnum());
      msg.setProtocol(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClassid(value);
      break;
    case 3:
      var value = /** @type {!proto.io.ConfigurationType} */ (reader.readEnum());
      msg.setConfigtype(value);
      break;
    case 4:
      var value = /** @type {!proto.io.PassEventId} */ (reader.readEnum());
      msg.setPasseventid(value);
      break;
    case 5:
      var value = /** @type {!proto.io.MembershipEventId} */ (reader.readEnum());
      msg.setMembershipeventid(value);
      break;
    case 6:
      var value = /** @type {!proto.io.CouponEventId} */ (reader.readEnum());
      msg.setCouponeventid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.SubscriptionRequestByClassId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.SubscriptionRequestByClassId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.SubscriptionRequestByClassId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.SubscriptionRequestByClassId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProtocol();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getClassid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getConfigtype();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = /** @type {!proto.io.PassEventId} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = /** @type {!proto.io.MembershipEventId} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = /** @type {!proto.io.CouponEventId} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * optional PassProtocol protocol = 1;
 * @return {!proto.io.PassProtocol}
 */
proto.io.SubscriptionRequestByClassId.prototype.getProtocol = function() {
  return /** @type {!proto.io.PassProtocol} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.io.PassProtocol} value
 * @return {!proto.io.SubscriptionRequestByClassId} returns this
 */
proto.io.SubscriptionRequestByClassId.prototype.setProtocol = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string classId = 2;
 * @return {string}
 */
proto.io.SubscriptionRequestByClassId.prototype.getClassid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.SubscriptionRequestByClassId} returns this
 */
proto.io.SubscriptionRequestByClassId.prototype.setClassid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ConfigurationType configType = 3;
 * @return {!proto.io.ConfigurationType}
 */
proto.io.SubscriptionRequestByClassId.prototype.getConfigtype = function() {
  return /** @type {!proto.io.ConfigurationType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.io.ConfigurationType} value
 * @return {!proto.io.SubscriptionRequestByClassId} returns this
 */
proto.io.SubscriptionRequestByClassId.prototype.setConfigtype = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional PassEventId passEventId = 4;
 * @return {!proto.io.PassEventId}
 */
proto.io.SubscriptionRequestByClassId.prototype.getPasseventid = function() {
  return /** @type {!proto.io.PassEventId} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.io.PassEventId} value
 * @return {!proto.io.SubscriptionRequestByClassId} returns this
 */
proto.io.SubscriptionRequestByClassId.prototype.setPasseventid = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.io.SubscriptionRequestByClassId.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.io.SubscriptionRequestByClassId} returns this
 */
proto.io.SubscriptionRequestByClassId.prototype.clearPasseventid = function() {
  return jspb.Message.setOneofField(this, 4, proto.io.SubscriptionRequestByClassId.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.SubscriptionRequestByClassId.prototype.hasPasseventid = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional MembershipEventId membershipEventId = 5;
 * @return {!proto.io.MembershipEventId}
 */
proto.io.SubscriptionRequestByClassId.prototype.getMembershipeventid = function() {
  return /** @type {!proto.io.MembershipEventId} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.io.MembershipEventId} value
 * @return {!proto.io.SubscriptionRequestByClassId} returns this
 */
proto.io.SubscriptionRequestByClassId.prototype.setMembershipeventid = function(value) {
  return jspb.Message.setOneofField(this, 5, proto.io.SubscriptionRequestByClassId.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.io.SubscriptionRequestByClassId} returns this
 */
proto.io.SubscriptionRequestByClassId.prototype.clearMembershipeventid = function() {
  return jspb.Message.setOneofField(this, 5, proto.io.SubscriptionRequestByClassId.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.SubscriptionRequestByClassId.prototype.hasMembershipeventid = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional CouponEventId couponEventId = 6;
 * @return {!proto.io.CouponEventId}
 */
proto.io.SubscriptionRequestByClassId.prototype.getCouponeventid = function() {
  return /** @type {!proto.io.CouponEventId} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.io.CouponEventId} value
 * @return {!proto.io.SubscriptionRequestByClassId} returns this
 */
proto.io.SubscriptionRequestByClassId.prototype.setCouponeventid = function(value) {
  return jspb.Message.setOneofField(this, 6, proto.io.SubscriptionRequestByClassId.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.io.SubscriptionRequestByClassId} returns this
 */
proto.io.SubscriptionRequestByClassId.prototype.clearCouponeventid = function() {
  return jspb.Message.setOneofField(this, 6, proto.io.SubscriptionRequestByClassId.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.SubscriptionRequestByClassId.prototype.hasCouponeventid = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.FieldMapping.prototype.toObject = function(opt_includeInstance) {
  return proto.io.FieldMapping.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.FieldMapping} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.FieldMapping.toObject = function(includeInstance, msg) {
  var f, obj = {
    destinationfieldkey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    destinationfielddatatype: jspb.Message.getFieldWithDefault(msg, 2, 0),
    isrequired: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    sourcefielduniquename: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.FieldMapping}
 */
proto.io.FieldMapping.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.FieldMapping;
  return proto.io.FieldMapping.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.FieldMapping} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.FieldMapping}
 */
proto.io.FieldMapping.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDestinationfieldkey(value);
      break;
    case 2:
      var value = /** @type {!proto.io.DataType} */ (reader.readEnum());
      msg.setDestinationfielddatatype(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsrequired(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourcefielduniquename(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.FieldMapping.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.FieldMapping.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.FieldMapping} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.FieldMapping.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDestinationfieldkey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDestinationfielddatatype();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getIsrequired();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getSourcefielduniquename();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string destinationFieldKey = 1;
 * @return {string}
 */
proto.io.FieldMapping.prototype.getDestinationfieldkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.FieldMapping} returns this
 */
proto.io.FieldMapping.prototype.setDestinationfieldkey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional DataType destinationFieldDataType = 2;
 * @return {!proto.io.DataType}
 */
proto.io.FieldMapping.prototype.getDestinationfielddatatype = function() {
  return /** @type {!proto.io.DataType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.io.DataType} value
 * @return {!proto.io.FieldMapping} returns this
 */
proto.io.FieldMapping.prototype.setDestinationfielddatatype = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional bool isRequired = 3;
 * @return {boolean}
 */
proto.io.FieldMapping.prototype.getIsrequired = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.io.FieldMapping} returns this
 */
proto.io.FieldMapping.prototype.setIsrequired = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional string sourceFieldUniqueName = 4;
 * @return {string}
 */
proto.io.FieldMapping.prototype.getSourcefielduniquename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.FieldMapping} returns this
 */
proto.io.FieldMapping.prototype.setSourcefielduniquename = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.WebhookConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.io.WebhookConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.WebhookConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.WebhookConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    targeturl: jspb.Message.getFieldWithDefault(msg, 1, ""),
    actionmethod: jspb.Message.getFieldWithDefault(msg, 2, 0),
    fieldmapping: (f = msg.getFieldmapping()) && proto.io.FieldMapping.toObject(includeInstance, f),
    signingsecret: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.WebhookConfig}
 */
proto.io.WebhookConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.WebhookConfig;
  return proto.io.WebhookConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.WebhookConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.WebhookConfig}
 */
proto.io.WebhookConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargeturl(value);
      break;
    case 2:
      var value = /** @type {!proto.io.ActionMethod} */ (reader.readEnum());
      msg.setActionmethod(value);
      break;
    case 3:
      var value = new proto.io.FieldMapping;
      reader.readMessage(value,proto.io.FieldMapping.deserializeBinaryFromReader);
      msg.setFieldmapping(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSigningsecret(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.WebhookConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.WebhookConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.WebhookConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.WebhookConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTargeturl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getActionmethod();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getFieldmapping();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.io.FieldMapping.serializeBinaryToWriter
    );
  }
  f = message.getSigningsecret();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string targetUrl = 1;
 * @return {string}
 */
proto.io.WebhookConfig.prototype.getTargeturl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.WebhookConfig} returns this
 */
proto.io.WebhookConfig.prototype.setTargeturl = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ActionMethod actionMethod = 2;
 * @return {!proto.io.ActionMethod}
 */
proto.io.WebhookConfig.prototype.getActionmethod = function() {
  return /** @type {!proto.io.ActionMethod} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.io.ActionMethod} value
 * @return {!proto.io.WebhookConfig} returns this
 */
proto.io.WebhookConfig.prototype.setActionmethod = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional FieldMapping fieldMapping = 3;
 * @return {?proto.io.FieldMapping}
 */
proto.io.WebhookConfig.prototype.getFieldmapping = function() {
  return /** @type{?proto.io.FieldMapping} */ (
    jspb.Message.getWrapperField(this, proto.io.FieldMapping, 3));
};


/**
 * @param {?proto.io.FieldMapping|undefined} value
 * @return {!proto.io.WebhookConfig} returns this
*/
proto.io.WebhookConfig.prototype.setFieldmapping = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.WebhookConfig} returns this
 */
proto.io.WebhookConfig.prototype.clearFieldmapping = function() {
  return this.setFieldmapping(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.WebhookConfig.prototype.hasFieldmapping = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string signingSecret = 4;
 * @return {string}
 */
proto.io.WebhookConfig.prototype.getSigningsecret = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.WebhookConfig} returns this
 */
proto.io.WebhookConfig.prototype.setSigningsecret = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.SinkSubscriptionPayload.prototype.toObject = function(opt_includeInstance) {
  return proto.io.SinkSubscriptionPayload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.SinkSubscriptionPayload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.SinkSubscriptionPayload.toObject = function(includeInstance, msg) {
  var f, obj = {
    event: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pass: (f = msg.getPass()) && io_common_pass_pb.Pass.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.SinkSubscriptionPayload}
 */
proto.io.SinkSubscriptionPayload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.SinkSubscriptionPayload;
  return proto.io.SinkSubscriptionPayload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.SinkSubscriptionPayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.SinkSubscriptionPayload}
 */
proto.io.SinkSubscriptionPayload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEvent(value);
      break;
    case 2:
      var value = new io_common_pass_pb.Pass;
      reader.readMessage(value,io_common_pass_pb.Pass.deserializeBinaryFromReader);
      msg.setPass(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.SinkSubscriptionPayload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.SinkSubscriptionPayload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.SinkSubscriptionPayload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.SinkSubscriptionPayload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEvent();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPass();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      io_common_pass_pb.Pass.serializeBinaryToWriter
    );
  }
};


/**
 * optional string event = 1;
 * @return {string}
 */
proto.io.SinkSubscriptionPayload.prototype.getEvent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.SinkSubscriptionPayload} returns this
 */
proto.io.SinkSubscriptionPayload.prototype.setEvent = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Pass pass = 2;
 * @return {?proto.io.Pass}
 */
proto.io.SinkSubscriptionPayload.prototype.getPass = function() {
  return /** @type{?proto.io.Pass} */ (
    jspb.Message.getWrapperField(this, io_common_pass_pb.Pass, 2));
};


/**
 * @param {?proto.io.Pass|undefined} value
 * @return {!proto.io.SinkSubscriptionPayload} returns this
*/
proto.io.SinkSubscriptionPayload.prototype.setPass = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.SinkSubscriptionPayload} returns this
 */
proto.io.SinkSubscriptionPayload.prototype.clearPass = function() {
  return this.setPass(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.SinkSubscriptionPayload.prototype.hasPass = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.SinkSubscription.repeatedFields_ = [4];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.io.SinkSubscription.oneofGroups_ = [[10,11]];

/**
 * @enum {number}
 */
proto.io.SinkSubscription.ProtocoleventidCase = {
  PROTOCOLEVENTID_NOT_SET: 0,
  MEMBERSHIPEVENTS: 10,
  COUPONEVENTS: 11
};

/**
 * @return {proto.io.SinkSubscription.ProtocoleventidCase}
 */
proto.io.SinkSubscription.prototype.getProtocoleventidCase = function() {
  return /** @type {proto.io.SinkSubscription.ProtocoleventidCase} */(jspb.Message.computeOneofCase(this, proto.io.SinkSubscription.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.SinkSubscription.prototype.toObject = function(opt_includeInstance) {
  return proto.io.SinkSubscription.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.SinkSubscription} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.SinkSubscription.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    classid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    protocol: jspb.Message.getFieldWithDefault(msg, 3, 0),
    passeventidList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    status: jspb.Message.getFieldWithDefault(msg, 5, 0),
    configtype: jspb.Message.getFieldWithDefault(msg, 6, 0),
    configuration: jspb.Message.getFieldWithDefault(msg, 7, ""),
    createdat: (f = msg.getCreatedat()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    updatedat: (f = msg.getUpdatedat()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    membershipevents: (f = msg.getMembershipevents()) && proto.io.MembershipEventIds.toObject(includeInstance, f),
    couponevents: (f = msg.getCouponevents()) && proto.io.CouponEventIds.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.SinkSubscription}
 */
proto.io.SinkSubscription.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.SinkSubscription;
  return proto.io.SinkSubscription.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.SinkSubscription} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.SinkSubscription}
 */
proto.io.SinkSubscription.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClassid(value);
      break;
    case 3:
      var value = /** @type {!proto.io.PassProtocol} */ (reader.readEnum());
      msg.setProtocol(value);
      break;
    case 4:
      var values = /** @type {!Array<!proto.io.PassEventId>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addPasseventid(values[i]);
      }
      break;
    case 5:
      var value = /** @type {!proto.io.IntegrationStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 6:
      var value = /** @type {!proto.io.ConfigurationType} */ (reader.readEnum());
      msg.setConfigtype(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setConfiguration(value);
      break;
    case 8:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedat(value);
      break;
    case 9:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setUpdatedat(value);
      break;
    case 10:
      var value = new proto.io.MembershipEventIds;
      reader.readMessage(value,proto.io.MembershipEventIds.deserializeBinaryFromReader);
      msg.setMembershipevents(value);
      break;
    case 11:
      var value = new proto.io.CouponEventIds;
      reader.readMessage(value,proto.io.CouponEventIds.deserializeBinaryFromReader);
      msg.setCouponevents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.SinkSubscription.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.SinkSubscription.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.SinkSubscription} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.SinkSubscription.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getClassid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getProtocol();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getPasseventidList();
  if (f.length > 0) {
    writer.writePackedEnum(
      4,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getConfigtype();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getConfiguration();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getCreatedat();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getUpdatedat();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getMembershipevents();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.io.MembershipEventIds.serializeBinaryToWriter
    );
  }
  f = message.getCouponevents();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.io.CouponEventIds.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.io.SinkSubscription.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.SinkSubscription} returns this
 */
proto.io.SinkSubscription.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string classId = 2;
 * @return {string}
 */
proto.io.SinkSubscription.prototype.getClassid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.SinkSubscription} returns this
 */
proto.io.SinkSubscription.prototype.setClassid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional PassProtocol protocol = 3;
 * @return {!proto.io.PassProtocol}
 */
proto.io.SinkSubscription.prototype.getProtocol = function() {
  return /** @type {!proto.io.PassProtocol} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.io.PassProtocol} value
 * @return {!proto.io.SinkSubscription} returns this
 */
proto.io.SinkSubscription.prototype.setProtocol = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * repeated PassEventId passEventId = 4;
 * @return {!Array<!proto.io.PassEventId>}
 */
proto.io.SinkSubscription.prototype.getPasseventidList = function() {
  return /** @type {!Array<!proto.io.PassEventId>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<!proto.io.PassEventId>} value
 * @return {!proto.io.SinkSubscription} returns this
 */
proto.io.SinkSubscription.prototype.setPasseventidList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!proto.io.PassEventId} value
 * @param {number=} opt_index
 * @return {!proto.io.SinkSubscription} returns this
 */
proto.io.SinkSubscription.prototype.addPasseventid = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.io.SinkSubscription} returns this
 */
proto.io.SinkSubscription.prototype.clearPasseventidList = function() {
  return this.setPasseventidList([]);
};


/**
 * optional IntegrationStatus status = 5;
 * @return {!proto.io.IntegrationStatus}
 */
proto.io.SinkSubscription.prototype.getStatus = function() {
  return /** @type {!proto.io.IntegrationStatus} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.io.IntegrationStatus} value
 * @return {!proto.io.SinkSubscription} returns this
 */
proto.io.SinkSubscription.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional ConfigurationType configType = 6;
 * @return {!proto.io.ConfigurationType}
 */
proto.io.SinkSubscription.prototype.getConfigtype = function() {
  return /** @type {!proto.io.ConfigurationType} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.io.ConfigurationType} value
 * @return {!proto.io.SinkSubscription} returns this
 */
proto.io.SinkSubscription.prototype.setConfigtype = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional string configuration = 7;
 * @return {string}
 */
proto.io.SinkSubscription.prototype.getConfiguration = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.SinkSubscription} returns this
 */
proto.io.SinkSubscription.prototype.setConfiguration = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional google.protobuf.Timestamp createdAt = 8;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.io.SinkSubscription.prototype.getCreatedat = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 8));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.io.SinkSubscription} returns this
*/
proto.io.SinkSubscription.prototype.setCreatedat = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.SinkSubscription} returns this
 */
proto.io.SinkSubscription.prototype.clearCreatedat = function() {
  return this.setCreatedat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.SinkSubscription.prototype.hasCreatedat = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional google.protobuf.Timestamp updatedAt = 9;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.io.SinkSubscription.prototype.getUpdatedat = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 9));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.io.SinkSubscription} returns this
*/
proto.io.SinkSubscription.prototype.setUpdatedat = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.SinkSubscription} returns this
 */
proto.io.SinkSubscription.prototype.clearUpdatedat = function() {
  return this.setUpdatedat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.SinkSubscription.prototype.hasUpdatedat = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional MembershipEventIds membershipEvents = 10;
 * @return {?proto.io.MembershipEventIds}
 */
proto.io.SinkSubscription.prototype.getMembershipevents = function() {
  return /** @type{?proto.io.MembershipEventIds} */ (
    jspb.Message.getWrapperField(this, proto.io.MembershipEventIds, 10));
};


/**
 * @param {?proto.io.MembershipEventIds|undefined} value
 * @return {!proto.io.SinkSubscription} returns this
*/
proto.io.SinkSubscription.prototype.setMembershipevents = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.io.SinkSubscription.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.SinkSubscription} returns this
 */
proto.io.SinkSubscription.prototype.clearMembershipevents = function() {
  return this.setMembershipevents(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.SinkSubscription.prototype.hasMembershipevents = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional CouponEventIds couponEvents = 11;
 * @return {?proto.io.CouponEventIds}
 */
proto.io.SinkSubscription.prototype.getCouponevents = function() {
  return /** @type{?proto.io.CouponEventIds} */ (
    jspb.Message.getWrapperField(this, proto.io.CouponEventIds, 11));
};


/**
 * @param {?proto.io.CouponEventIds|undefined} value
 * @return {!proto.io.SinkSubscription} returns this
*/
proto.io.SinkSubscription.prototype.setCouponevents = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.io.SinkSubscription.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.SinkSubscription} returns this
 */
proto.io.SinkSubscription.prototype.clearCouponevents = function() {
  return this.setCouponevents(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.SinkSubscription.prototype.hasCouponevents = function() {
  return jspb.Message.getField(this, 11) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.DynamicApiInput.prototype.toObject = function(opt_includeInstance) {
  return proto.io.DynamicApiInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.DynamicApiInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.DynamicApiInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    classid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    request: (f = msg.getRequest()) && proto.io.DynamicApiRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.DynamicApiInput}
 */
proto.io.DynamicApiInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.DynamicApiInput;
  return proto.io.DynamicApiInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.DynamicApiInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.DynamicApiInput}
 */
proto.io.DynamicApiInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClassid(value);
      break;
    case 2:
      var value = new proto.io.DynamicApiRequest;
      reader.readMessage(value,proto.io.DynamicApiRequest.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.DynamicApiInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.DynamicApiInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.DynamicApiInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.DynamicApiInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClassid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.io.DynamicApiRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional string classId = 1;
 * @return {string}
 */
proto.io.DynamicApiInput.prototype.getClassid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.DynamicApiInput} returns this
 */
proto.io.DynamicApiInput.prototype.setClassid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional DynamicApiRequest request = 2;
 * @return {?proto.io.DynamicApiRequest}
 */
proto.io.DynamicApiInput.prototype.getRequest = function() {
  return /** @type{?proto.io.DynamicApiRequest} */ (
    jspb.Message.getWrapperField(this, proto.io.DynamicApiRequest, 2));
};


/**
 * @param {?proto.io.DynamicApiRequest|undefined} value
 * @return {!proto.io.DynamicApiInput} returns this
*/
proto.io.DynamicApiInput.prototype.setRequest = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.DynamicApiInput} returns this
 */
proto.io.DynamicApiInput.prototype.clearRequest = function() {
  return this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.DynamicApiInput.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.DynamicApiRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.io.DynamicApiRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.DynamicApiRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.DynamicApiRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    paramsMap: (f = msg.getParamsMap()) ? f.toObject(includeInstance, undefined) : [],
    payload: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.DynamicApiRequest}
 */
proto.io.DynamicApiRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.DynamicApiRequest;
  return proto.io.DynamicApiRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.DynamicApiRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.DynamicApiRequest}
 */
proto.io.DynamicApiRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestname(value);
      break;
    case 2:
      var value = msg.getParamsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.DynamicApiRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.DynamicApiRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.DynamicApiRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.DynamicApiRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getParamsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getPayload();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string requestName = 1;
 * @return {string}
 */
proto.io.DynamicApiRequest.prototype.getRequestname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.DynamicApiRequest} returns this
 */
proto.io.DynamicApiRequest.prototype.setRequestname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * map<string, string> params = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.io.DynamicApiRequest.prototype.getParamsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.io.DynamicApiRequest} returns this
 */
proto.io.DynamicApiRequest.prototype.clearParamsMap = function() {
  this.getParamsMap().clear();
  return this;};


/**
 * optional string payload = 3;
 * @return {string}
 */
proto.io.DynamicApiRequest.prototype.getPayload = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.DynamicApiRequest} returns this
 */
proto.io.DynamicApiRequest.prototype.setPayload = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.DynamicApiResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.io.DynamicApiResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.DynamicApiResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.DynamicApiResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responsebody: msg.getResponsebody_asB64(),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.DynamicApiResponse}
 */
proto.io.DynamicApiResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.DynamicApiResponse;
  return proto.io.DynamicApiResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.DynamicApiResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.DynamicApiResponse}
 */
proto.io.DynamicApiResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setResponsebody(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.DynamicApiResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.DynamicApiResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.DynamicApiResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.DynamicApiResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponsebody_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional bytes responseBody = 1;
 * @return {string}
 */
proto.io.DynamicApiResponse.prototype.getResponsebody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes responseBody = 1;
 * This is a type-conversion wrapper around `getResponsebody()`
 * @return {string}
 */
proto.io.DynamicApiResponse.prototype.getResponsebody_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getResponsebody()));
};


/**
 * optional bytes responseBody = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getResponsebody()`
 * @return {!Uint8Array}
 */
proto.io.DynamicApiResponse.prototype.getResponsebody_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getResponsebody()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.io.DynamicApiResponse} returns this
 */
proto.io.DynamicApiResponse.prototype.setResponsebody = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional int32 status = 2;
 * @return {number}
 */
proto.io.DynamicApiResponse.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.io.DynamicApiResponse} returns this
 */
proto.io.DynamicApiResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.io.IntegrationStatus = {
  INTEGRATION_STATUS_NONE: 0,
  INTEGRATION_DISABLED: 1,
  INTEGRATION_ACTIVE: 2,
  INTEGRATION_SUSPENDED: 3
};

/**
 * @enum {number}
 */
proto.io.ConfigurationType = {
  CONFIGURATION_NONE: 0,
  WEBHOOK: 1,
  DB_MYSQL: 2,
  ZOHO: 3,
  BRAZE: 4,
  CODEREADR: 5,
  ZAPIER: 6,
  MAILCHIMP: 7,
  SPROUT: 8,
  TESSITURA: 9,
  ITERABLE: 10,
  MOENGAGE: 11,
  ORACLE_RESPONSYS: 12,
  _CONFIG_TYPE_1: 100
};

/**
 * @enum {number}
 */
proto.io.IntegrationType = {
  INTEGRATION_TYPE_NONE: 0,
  SOURCE_INTEGRATION: 1,
  HOOK_BEFORE_OBJECT_RECORD_CREATION: 4,
  HOOK_AFTER_OBJECT_RECORD_CREATION: 8,
  HOOK_BEFORE_PASS_ISSUE: 16,
  HOOK_AFTER_PASS_ISSUE: 32,
  HOOK_AFTER_PASS_INSTALL: 64,
  HOOK_AFTER_PASS_UNINSTALL: 128,
  HOOK_BEFORE_OBJECT_RECORD_UPDATE: 256,
  HOOK_AFTER_OBJECT_RECORD_UPDATE: 512,
  HOOK_BEFORE_PASS_RECORD_UPDATE: 1024,
  HOOK_AFTER_PASS_RECORD_UPDATE: 2048,
  HOOK_BEFORE_PASS_UPDATE: 4096,
  HOOK_AFTER_PASS_UPDATE: 8192,
  HOOK_BEFORE_PASS_RECORD_DELETE: 16384,
  HOOK_AFTER_PASS_RECORD_DELETE: 32768
};

/**
 * @enum {number}
 */
proto.io.ProtocolIntgType = {
  PROTOCOL_INTG_TYPE_NONE: 0,
  HOOK_BEFORE_MEMBER_UPDATE_POINTS: 1,
  HOOK_AFTER_MEMBER_UPDATE_POINTS: 4,
  HOOK_BEFORE_MEMBER_TIER_UPDATE: 8,
  HOOK_AFTER_MEMBER_TIER_UPDATE: 16,
  HOOK_BEFORE_MEMBER_CHECK_IN: 32,
  HOOK_AFTER_MEMBER_CHECK_IN: 64,
  HOOK_BEFORE_MEMBER_CHECK_OUT: 128,
  HOOK_AFTER_MEMBER_CHECK_OUT: 256,
  HOOK_BEFORE_COUPON_REDEEM: 2048,
  HOOK_AFTER_COUPON_REDEEM: 4096,
  HOOK_BEFORE_UPDATE_COUPON_OFFER: 8192,
  HOOK_AFTER_UPDATE_COUPON_OFFER: 16384,
  HOOK_BEFORE_CREATE_COUPON_OFFER: 32768,
  HOOK_AFTER_CREATE_COUPON_OFFER: 65536,
  HOOK_BEFORE_UPDATE_PII: 2097152,
  HOOK_AFTER_UPDATE_PII: 4194304
};

/**
 * @enum {number}
 */
proto.io.PassEventId = {
  PASS_EVENT_NONE: 0,
  PASS_EVENT_RECORD_CREATED: 1,
  PASS_EVENT_INSTALLED: 2,
  PASS_EVENT_RECORD_UPDATED: 4,
  PASS_EVENT_UNINSTALLED: 8,
  PASS_EVENT_INVALIDATED: 16,
  PASS_EVENT_RECORD_DELETED: 32
};

/**
 * @enum {number}
 */
proto.io.MembershipEventId = {
  MEMBER_EVENT_NONE: 0,
  MEMBER_EVENT_ENROLLED: 1,
  MEMBER_EVENT_UPDATED: 2
};

/**
 * @enum {number}
 */
proto.io.CouponEventId = {
  COUPON_EVENT_NONE: 0,
  COUPON_EVENT_CREATED: 1,
  COUPON_EVENT_REDEEMED: 2,
  COUPON_EVENT_UPDATED: 4,
  COUPON_EVENT_DELETED: 8
};

/**
 * @enum {number}
 */
proto.io.ActionMethod = {
  METHOD_NONE: 0,
  METHOD_POST: 1,
  METHOD_PUT: 2,
  METHOD_DELETE: 3
};

goog.object.extend(exports, proto.io);
