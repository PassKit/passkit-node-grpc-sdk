// source: io/common/reporting.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var io_common_protocols_pb = require('../../io/common/protocols_pb.js');
goog.object.extend(proto, io_common_protocols_pb);
var io_common_common_objects_pb = require('../../io/common/common_objects_pb.js');
goog.object.extend(proto, io_common_common_objects_pb);
goog.exportSymbol('proto.io.AnalyticsRequest', null, global);
goog.exportSymbol('proto.io.AnalyticsRequest.FilterCase', null, global);
goog.exportSymbol('proto.io.AnalyticsResponse', null, global);
goog.exportSymbol('proto.io.ChartDataPoints', null, global);
goog.exportSymbol('proto.io.CouponAnalyticsFilter', null, global);
goog.exportSymbol('proto.io.DeviceBreakdown', null, global);
goog.exportSymbol('proto.io.EventTicketAnalyticsFilter', null, global);
goog.exportSymbol('proto.io.FlightAnalyticsFilter', null, global);
goog.exportSymbol('proto.io.Period', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.AnalyticsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.AnalyticsResponse.repeatedFields_, null);
};
goog.inherits(proto.io.AnalyticsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.AnalyticsResponse.displayName = 'proto.io.AnalyticsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.DeviceBreakdown = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.DeviceBreakdown, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.DeviceBreakdown.displayName = 'proto.io.DeviceBreakdown';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.ChartDataPoints = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.ChartDataPoints, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.ChartDataPoints.displayName = 'proto.io.ChartDataPoints';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.AnalyticsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.io.AnalyticsRequest.oneofGroups_);
};
goog.inherits(proto.io.AnalyticsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.AnalyticsRequest.displayName = 'proto.io.AnalyticsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.CouponAnalyticsFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.CouponAnalyticsFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.CouponAnalyticsFilter.displayName = 'proto.io.CouponAnalyticsFilter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.FlightAnalyticsFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.FlightAnalyticsFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.FlightAnalyticsFilter.displayName = 'proto.io.FlightAnalyticsFilter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.EventTicketAnalyticsFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.EventTicketAnalyticsFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.EventTicketAnalyticsFilter.displayName = 'proto.io.EventTicketAnalyticsFilter';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.AnalyticsResponse.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.AnalyticsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.io.AnalyticsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.AnalyticsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.AnalyticsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    period: jspb.Message.getFieldWithDefault(msg, 1, 0),
    created: jspb.Message.getFieldWithDefault(msg, 2, 0),
    installed: jspb.Message.getFieldWithDefault(msg, 3, 0),
    deleted: jspb.Message.getFieldWithDefault(msg, 4, 0),
    invalidated: jspb.Message.getFieldWithDefault(msg, 5, 0),
    devicebreakdown: (f = msg.getDevicebreakdown()) && proto.io.DeviceBreakdown.toObject(includeInstance, f),
    utmsourcebreakdownMap: (f = msg.getUtmsourcebreakdownMap()) ? f.toObject(includeInstance, undefined) : [],
    dataList: jspb.Message.toObjectList(msg.getDataList(),
    proto.io.ChartDataPoints.toObject, includeInstance),
    utmmediumbreakdownMap: (f = msg.getUtmmediumbreakdownMap()) ? f.toObject(includeInstance, undefined) : [],
    utmnamebreakdownMap: (f = msg.getUtmnamebreakdownMap()) ? f.toObject(includeInstance, undefined) : [],
    utmtermbreakdownMap: (f = msg.getUtmtermbreakdownMap()) ? f.toObject(includeInstance, undefined) : [],
    utmcontentbreakdownMap: (f = msg.getUtmcontentbreakdownMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.AnalyticsResponse}
 */
proto.io.AnalyticsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.AnalyticsResponse;
  return proto.io.AnalyticsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.AnalyticsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.AnalyticsResponse}
 */
proto.io.AnalyticsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.io.Period} */ (reader.readEnum());
      msg.setPeriod(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCreated(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInstalled(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeleted(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInvalidated(value);
      break;
    case 6:
      var value = new proto.io.DeviceBreakdown;
      reader.readMessage(value,proto.io.DeviceBreakdown.deserializeBinaryFromReader);
      msg.setDevicebreakdown(value);
      break;
    case 7:
      var value = msg.getUtmsourcebreakdownMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readUint32, null, "", 0);
         });
      break;
    case 8:
      var value = new proto.io.ChartDataPoints;
      reader.readMessage(value,proto.io.ChartDataPoints.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    case 9:
      var value = msg.getUtmmediumbreakdownMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readUint32, null, "", 0);
         });
      break;
    case 10:
      var value = msg.getUtmnamebreakdownMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readUint32, null, "", 0);
         });
      break;
    case 11:
      var value = msg.getUtmtermbreakdownMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readUint32, null, "", 0);
         });
      break;
    case 12:
      var value = msg.getUtmcontentbreakdownMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readUint32, null, "", 0);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.AnalyticsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.AnalyticsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.AnalyticsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.AnalyticsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeriod();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCreated();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getInstalled();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getDeleted();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getInvalidated();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getDevicebreakdown();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.io.DeviceBreakdown.serializeBinaryToWriter
    );
  }
  f = message.getUtmsourcebreakdownMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeUint32);
  }
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.io.ChartDataPoints.serializeBinaryToWriter
    );
  }
  f = message.getUtmmediumbreakdownMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(9, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeUint32);
  }
  f = message.getUtmnamebreakdownMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(10, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeUint32);
  }
  f = message.getUtmtermbreakdownMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(11, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeUint32);
  }
  f = message.getUtmcontentbreakdownMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(12, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeUint32);
  }
};


/**
 * optional Period period = 1;
 * @return {!proto.io.Period}
 */
proto.io.AnalyticsResponse.prototype.getPeriod = function() {
  return /** @type {!proto.io.Period} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.io.Period} value
 * @return {!proto.io.AnalyticsResponse} returns this
 */
proto.io.AnalyticsResponse.prototype.setPeriod = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint32 created = 2;
 * @return {number}
 */
proto.io.AnalyticsResponse.prototype.getCreated = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.io.AnalyticsResponse} returns this
 */
proto.io.AnalyticsResponse.prototype.setCreated = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 installed = 3;
 * @return {number}
 */
proto.io.AnalyticsResponse.prototype.getInstalled = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.io.AnalyticsResponse} returns this
 */
proto.io.AnalyticsResponse.prototype.setInstalled = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 deleted = 4;
 * @return {number}
 */
proto.io.AnalyticsResponse.prototype.getDeleted = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.io.AnalyticsResponse} returns this
 */
proto.io.AnalyticsResponse.prototype.setDeleted = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 invalidated = 5;
 * @return {number}
 */
proto.io.AnalyticsResponse.prototype.getInvalidated = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.io.AnalyticsResponse} returns this
 */
proto.io.AnalyticsResponse.prototype.setInvalidated = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional DeviceBreakdown deviceBreakdown = 6;
 * @return {?proto.io.DeviceBreakdown}
 */
proto.io.AnalyticsResponse.prototype.getDevicebreakdown = function() {
  return /** @type{?proto.io.DeviceBreakdown} */ (
    jspb.Message.getWrapperField(this, proto.io.DeviceBreakdown, 6));
};


/**
 * @param {?proto.io.DeviceBreakdown|undefined} value
 * @return {!proto.io.AnalyticsResponse} returns this
*/
proto.io.AnalyticsResponse.prototype.setDevicebreakdown = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.AnalyticsResponse} returns this
 */
proto.io.AnalyticsResponse.prototype.clearDevicebreakdown = function() {
  return this.setDevicebreakdown(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.AnalyticsResponse.prototype.hasDevicebreakdown = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * map<string, uint32> utmSourceBreakdown = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.io.AnalyticsResponse.prototype.getUtmsourcebreakdownMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 7, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.io.AnalyticsResponse} returns this
 */
proto.io.AnalyticsResponse.prototype.clearUtmsourcebreakdownMap = function() {
  this.getUtmsourcebreakdownMap().clear();
  return this;};


/**
 * repeated ChartDataPoints data = 8;
 * @return {!Array<!proto.io.ChartDataPoints>}
 */
proto.io.AnalyticsResponse.prototype.getDataList = function() {
  return /** @type{!Array<!proto.io.ChartDataPoints>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.io.ChartDataPoints, 8));
};


/**
 * @param {!Array<!proto.io.ChartDataPoints>} value
 * @return {!proto.io.AnalyticsResponse} returns this
*/
proto.io.AnalyticsResponse.prototype.setDataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.io.ChartDataPoints=} opt_value
 * @param {number=} opt_index
 * @return {!proto.io.ChartDataPoints}
 */
proto.io.AnalyticsResponse.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.io.ChartDataPoints, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.io.AnalyticsResponse} returns this
 */
proto.io.AnalyticsResponse.prototype.clearDataList = function() {
  return this.setDataList([]);
};


/**
 * map<string, uint32> utmMediumBreakdown = 9;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.io.AnalyticsResponse.prototype.getUtmmediumbreakdownMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 9, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.io.AnalyticsResponse} returns this
 */
proto.io.AnalyticsResponse.prototype.clearUtmmediumbreakdownMap = function() {
  this.getUtmmediumbreakdownMap().clear();
  return this;};


/**
 * map<string, uint32> utmNameBreakdown = 10;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.io.AnalyticsResponse.prototype.getUtmnamebreakdownMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 10, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.io.AnalyticsResponse} returns this
 */
proto.io.AnalyticsResponse.prototype.clearUtmnamebreakdownMap = function() {
  this.getUtmnamebreakdownMap().clear();
  return this;};


/**
 * map<string, uint32> utmTermBreakdown = 11;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.io.AnalyticsResponse.prototype.getUtmtermbreakdownMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 11, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.io.AnalyticsResponse} returns this
 */
proto.io.AnalyticsResponse.prototype.clearUtmtermbreakdownMap = function() {
  this.getUtmtermbreakdownMap().clear();
  return this;};


/**
 * map<string, uint32> utmContentBreakdown = 12;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.io.AnalyticsResponse.prototype.getUtmcontentbreakdownMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 12, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.io.AnalyticsResponse} returns this
 */
proto.io.AnalyticsResponse.prototype.clearUtmcontentbreakdownMap = function() {
  this.getUtmcontentbreakdownMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.DeviceBreakdown.prototype.toObject = function(opt_includeInstance) {
  return proto.io.DeviceBreakdown.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.DeviceBreakdown} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.DeviceBreakdown.toObject = function(includeInstance, msg) {
  var f, obj = {
    applewallet: jspb.Message.getFieldWithDefault(msg, 1, 0),
    googlepay: jspb.Message.getFieldWithDefault(msg, 2, 0),
    otherwallet: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.DeviceBreakdown}
 */
proto.io.DeviceBreakdown.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.DeviceBreakdown;
  return proto.io.DeviceBreakdown.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.DeviceBreakdown} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.DeviceBreakdown}
 */
proto.io.DeviceBreakdown.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setApplewallet(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGooglepay(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOtherwallet(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.DeviceBreakdown.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.DeviceBreakdown.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.DeviceBreakdown} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.DeviceBreakdown.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApplewallet();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getGooglepay();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getOtherwallet();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 appleWallet = 1;
 * @return {number}
 */
proto.io.DeviceBreakdown.prototype.getApplewallet = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.io.DeviceBreakdown} returns this
 */
proto.io.DeviceBreakdown.prototype.setApplewallet = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 googlePay = 2;
 * @return {number}
 */
proto.io.DeviceBreakdown.prototype.getGooglepay = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.io.DeviceBreakdown} returns this
 */
proto.io.DeviceBreakdown.prototype.setGooglepay = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 otherWallet = 3;
 * @return {number}
 */
proto.io.DeviceBreakdown.prototype.getOtherwallet = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.io.DeviceBreakdown} returns this
 */
proto.io.DeviceBreakdown.prototype.setOtherwallet = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.ChartDataPoints.prototype.toObject = function(opt_includeInstance) {
  return proto.io.ChartDataPoints.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.ChartDataPoints} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.ChartDataPoints.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    created: jspb.Message.getFieldWithDefault(msg, 2, 0),
    installed: jspb.Message.getFieldWithDefault(msg, 3, 0),
    updated: jspb.Message.getFieldWithDefault(msg, 4, 0),
    deleted: jspb.Message.getFieldWithDefault(msg, 5, 0),
    invalidated: jspb.Message.getFieldWithDefault(msg, 6, 0),
    custom: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.ChartDataPoints}
 */
proto.io.ChartDataPoints.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.ChartDataPoints;
  return proto.io.ChartDataPoints.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.ChartDataPoints} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.ChartDataPoints}
 */
proto.io.ChartDataPoints.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCreated(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInstalled(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUpdated(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeleted(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInvalidated(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCustom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.ChartDataPoints.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.ChartDataPoints.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.ChartDataPoints} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.ChartDataPoints.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCreated();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getInstalled();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getUpdated();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getDeleted();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getInvalidated();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getCustom();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.io.ChartDataPoints.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.ChartDataPoints} returns this
 */
proto.io.ChartDataPoints.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 created = 2;
 * @return {number}
 */
proto.io.ChartDataPoints.prototype.getCreated = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.io.ChartDataPoints} returns this
 */
proto.io.ChartDataPoints.prototype.setCreated = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 installed = 3;
 * @return {number}
 */
proto.io.ChartDataPoints.prototype.getInstalled = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.io.ChartDataPoints} returns this
 */
proto.io.ChartDataPoints.prototype.setInstalled = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 updated = 4;
 * @return {number}
 */
proto.io.ChartDataPoints.prototype.getUpdated = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.io.ChartDataPoints} returns this
 */
proto.io.ChartDataPoints.prototype.setUpdated = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 deleted = 5;
 * @return {number}
 */
proto.io.ChartDataPoints.prototype.getDeleted = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.io.ChartDataPoints} returns this
 */
proto.io.ChartDataPoints.prototype.setDeleted = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 invalidated = 6;
 * @return {number}
 */
proto.io.ChartDataPoints.prototype.getInvalidated = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.io.ChartDataPoints} returns this
 */
proto.io.ChartDataPoints.prototype.setInvalidated = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint32 custom = 7;
 * @return {number}
 */
proto.io.ChartDataPoints.prototype.getCustom = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.io.ChartDataPoints} returns this
 */
proto.io.ChartDataPoints.prototype.setCustom = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.io.AnalyticsRequest.oneofGroups_ = [[15,16,17]];

/**
 * @enum {number}
 */
proto.io.AnalyticsRequest.FilterCase = {
  FILTER_NOT_SET: 0,
  COUPON: 15,
  FLIGHT: 16,
  EVENTTICKET: 17
};

/**
 * @return {proto.io.AnalyticsRequest.FilterCase}
 */
proto.io.AnalyticsRequest.prototype.getFilterCase = function() {
  return /** @type {proto.io.AnalyticsRequest.FilterCase} */(jspb.Message.computeOneofCase(this, proto.io.AnalyticsRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.AnalyticsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.io.AnalyticsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.AnalyticsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.AnalyticsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    protocol: jspb.Message.getFieldWithDefault(msg, 1, 0),
    classid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    period: jspb.Message.getFieldWithDefault(msg, 3, 0),
    startdate: jspb.Message.getFieldWithDefault(msg, 4, ""),
    enddate: jspb.Message.getFieldWithDefault(msg, 5, ""),
    timezone: jspb.Message.getFieldWithDefault(msg, 6, ""),
    coupon: (f = msg.getCoupon()) && proto.io.CouponAnalyticsFilter.toObject(includeInstance, f),
    flight: (f = msg.getFlight()) && proto.io.FlightAnalyticsFilter.toObject(includeInstance, f),
    eventticket: (f = msg.getEventticket()) && proto.io.EventTicketAnalyticsFilter.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.AnalyticsRequest}
 */
proto.io.AnalyticsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.AnalyticsRequest;
  return proto.io.AnalyticsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.AnalyticsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.AnalyticsRequest}
 */
proto.io.AnalyticsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.io.PassProtocol} */ (reader.readEnum());
      msg.setProtocol(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClassid(value);
      break;
    case 3:
      var value = /** @type {!proto.io.Period} */ (reader.readEnum());
      msg.setPeriod(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setStartdate(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setEnddate(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimezone(value);
      break;
    case 15:
      var value = new proto.io.CouponAnalyticsFilter;
      reader.readMessage(value,proto.io.CouponAnalyticsFilter.deserializeBinaryFromReader);
      msg.setCoupon(value);
      break;
    case 16:
      var value = new proto.io.FlightAnalyticsFilter;
      reader.readMessage(value,proto.io.FlightAnalyticsFilter.deserializeBinaryFromReader);
      msg.setFlight(value);
      break;
    case 17:
      var value = new proto.io.EventTicketAnalyticsFilter;
      reader.readMessage(value,proto.io.EventTicketAnalyticsFilter.deserializeBinaryFromReader);
      msg.setEventticket(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.AnalyticsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.AnalyticsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.AnalyticsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.AnalyticsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProtocol();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getClassid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPeriod();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getStartdate();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getEnddate();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTimezone();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getCoupon();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.io.CouponAnalyticsFilter.serializeBinaryToWriter
    );
  }
  f = message.getFlight();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.io.FlightAnalyticsFilter.serializeBinaryToWriter
    );
  }
  f = message.getEventticket();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.io.EventTicketAnalyticsFilter.serializeBinaryToWriter
    );
  }
};


/**
 * optional PassProtocol protocol = 1;
 * @return {!proto.io.PassProtocol}
 */
proto.io.AnalyticsRequest.prototype.getProtocol = function() {
  return /** @type {!proto.io.PassProtocol} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.io.PassProtocol} value
 * @return {!proto.io.AnalyticsRequest} returns this
 */
proto.io.AnalyticsRequest.prototype.setProtocol = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string classId = 2;
 * @return {string}
 */
proto.io.AnalyticsRequest.prototype.getClassid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.AnalyticsRequest} returns this
 */
proto.io.AnalyticsRequest.prototype.setClassid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Period period = 3;
 * @return {!proto.io.Period}
 */
proto.io.AnalyticsRequest.prototype.getPeriod = function() {
  return /** @type {!proto.io.Period} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.io.Period} value
 * @return {!proto.io.AnalyticsRequest} returns this
 */
proto.io.AnalyticsRequest.prototype.setPeriod = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string startDate = 4;
 * @return {string}
 */
proto.io.AnalyticsRequest.prototype.getStartdate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.AnalyticsRequest} returns this
 */
proto.io.AnalyticsRequest.prototype.setStartdate = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string endDate = 5;
 * @return {string}
 */
proto.io.AnalyticsRequest.prototype.getEnddate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.AnalyticsRequest} returns this
 */
proto.io.AnalyticsRequest.prototype.setEnddate = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string timezone = 6;
 * @return {string}
 */
proto.io.AnalyticsRequest.prototype.getTimezone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.AnalyticsRequest} returns this
 */
proto.io.AnalyticsRequest.prototype.setTimezone = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional CouponAnalyticsFilter coupon = 15;
 * @return {?proto.io.CouponAnalyticsFilter}
 */
proto.io.AnalyticsRequest.prototype.getCoupon = function() {
  return /** @type{?proto.io.CouponAnalyticsFilter} */ (
    jspb.Message.getWrapperField(this, proto.io.CouponAnalyticsFilter, 15));
};


/**
 * @param {?proto.io.CouponAnalyticsFilter|undefined} value
 * @return {!proto.io.AnalyticsRequest} returns this
*/
proto.io.AnalyticsRequest.prototype.setCoupon = function(value) {
  return jspb.Message.setOneofWrapperField(this, 15, proto.io.AnalyticsRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.AnalyticsRequest} returns this
 */
proto.io.AnalyticsRequest.prototype.clearCoupon = function() {
  return this.setCoupon(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.AnalyticsRequest.prototype.hasCoupon = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional FlightAnalyticsFilter flight = 16;
 * @return {?proto.io.FlightAnalyticsFilter}
 */
proto.io.AnalyticsRequest.prototype.getFlight = function() {
  return /** @type{?proto.io.FlightAnalyticsFilter} */ (
    jspb.Message.getWrapperField(this, proto.io.FlightAnalyticsFilter, 16));
};


/**
 * @param {?proto.io.FlightAnalyticsFilter|undefined} value
 * @return {!proto.io.AnalyticsRequest} returns this
*/
proto.io.AnalyticsRequest.prototype.setFlight = function(value) {
  return jspb.Message.setOneofWrapperField(this, 16, proto.io.AnalyticsRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.AnalyticsRequest} returns this
 */
proto.io.AnalyticsRequest.prototype.clearFlight = function() {
  return this.setFlight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.AnalyticsRequest.prototype.hasFlight = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional EventTicketAnalyticsFilter eventTicket = 17;
 * @return {?proto.io.EventTicketAnalyticsFilter}
 */
proto.io.AnalyticsRequest.prototype.getEventticket = function() {
  return /** @type{?proto.io.EventTicketAnalyticsFilter} */ (
    jspb.Message.getWrapperField(this, proto.io.EventTicketAnalyticsFilter, 17));
};


/**
 * @param {?proto.io.EventTicketAnalyticsFilter|undefined} value
 * @return {!proto.io.AnalyticsRequest} returns this
*/
proto.io.AnalyticsRequest.prototype.setEventticket = function(value) {
  return jspb.Message.setOneofWrapperField(this, 17, proto.io.AnalyticsRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.AnalyticsRequest} returns this
 */
proto.io.AnalyticsRequest.prototype.clearEventticket = function() {
  return this.setEventticket(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.AnalyticsRequest.prototype.hasEventticket = function() {
  return jspb.Message.getField(this, 17) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.CouponAnalyticsFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.io.CouponAnalyticsFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.CouponAnalyticsFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.CouponAnalyticsFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    offerid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.CouponAnalyticsFilter}
 */
proto.io.CouponAnalyticsFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.CouponAnalyticsFilter;
  return proto.io.CouponAnalyticsFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.CouponAnalyticsFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.CouponAnalyticsFilter}
 */
proto.io.CouponAnalyticsFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOfferid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.CouponAnalyticsFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.CouponAnalyticsFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.CouponAnalyticsFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.CouponAnalyticsFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOfferid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string offerId = 1;
 * @return {string}
 */
proto.io.CouponAnalyticsFilter.prototype.getOfferid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.CouponAnalyticsFilter} returns this
 */
proto.io.CouponAnalyticsFilter.prototype.setOfferid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.FlightAnalyticsFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.io.FlightAnalyticsFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.FlightAnalyticsFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.FlightAnalyticsFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    flightnumber: jspb.Message.getFieldWithDefault(msg, 1, ""),
    departuredate: (f = msg.getDeparturedate()) && io_common_common_objects_pb.Date.toObject(includeInstance, f),
    boardingpoint: jspb.Message.getFieldWithDefault(msg, 3, ""),
    deplaningpoint: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.FlightAnalyticsFilter}
 */
proto.io.FlightAnalyticsFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.FlightAnalyticsFilter;
  return proto.io.FlightAnalyticsFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.FlightAnalyticsFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.FlightAnalyticsFilter}
 */
proto.io.FlightAnalyticsFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFlightnumber(value);
      break;
    case 2:
      var value = new io_common_common_objects_pb.Date;
      reader.readMessage(value,io_common_common_objects_pb.Date.deserializeBinaryFromReader);
      msg.setDeparturedate(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBoardingpoint(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeplaningpoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.FlightAnalyticsFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.FlightAnalyticsFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.FlightAnalyticsFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.FlightAnalyticsFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFlightnumber();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDeparturedate();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      io_common_common_objects_pb.Date.serializeBinaryToWriter
    );
  }
  f = message.getBoardingpoint();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDeplaningpoint();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string flightNumber = 1;
 * @return {string}
 */
proto.io.FlightAnalyticsFilter.prototype.getFlightnumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.FlightAnalyticsFilter} returns this
 */
proto.io.FlightAnalyticsFilter.prototype.setFlightnumber = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Date departureDate = 2;
 * @return {?proto.io.Date}
 */
proto.io.FlightAnalyticsFilter.prototype.getDeparturedate = function() {
  return /** @type{?proto.io.Date} */ (
    jspb.Message.getWrapperField(this, io_common_common_objects_pb.Date, 2));
};


/**
 * @param {?proto.io.Date|undefined} value
 * @return {!proto.io.FlightAnalyticsFilter} returns this
*/
proto.io.FlightAnalyticsFilter.prototype.setDeparturedate = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.FlightAnalyticsFilter} returns this
 */
proto.io.FlightAnalyticsFilter.prototype.clearDeparturedate = function() {
  return this.setDeparturedate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.FlightAnalyticsFilter.prototype.hasDeparturedate = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string boardingPoint = 3;
 * @return {string}
 */
proto.io.FlightAnalyticsFilter.prototype.getBoardingpoint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.FlightAnalyticsFilter} returns this
 */
proto.io.FlightAnalyticsFilter.prototype.setBoardingpoint = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string deplaningPoint = 4;
 * @return {string}
 */
proto.io.FlightAnalyticsFilter.prototype.getDeplaningpoint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.FlightAnalyticsFilter} returns this
 */
proto.io.FlightAnalyticsFilter.prototype.setDeplaningpoint = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.EventTicketAnalyticsFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.io.EventTicketAnalyticsFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.EventTicketAnalyticsFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.EventTicketAnalyticsFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    tickettypeid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tickettypeuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    venueid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    venueuid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    eventid: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.EventTicketAnalyticsFilter}
 */
proto.io.EventTicketAnalyticsFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.EventTicketAnalyticsFilter;
  return proto.io.EventTicketAnalyticsFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.EventTicketAnalyticsFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.EventTicketAnalyticsFilter}
 */
proto.io.EventTicketAnalyticsFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTickettypeid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTickettypeuid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setVenueid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setVenueuid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.EventTicketAnalyticsFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.EventTicketAnalyticsFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.EventTicketAnalyticsFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.EventTicketAnalyticsFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTickettypeid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTickettypeuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getVenueid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getVenueuid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getEventid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string ticketTypeId = 1;
 * @return {string}
 */
proto.io.EventTicketAnalyticsFilter.prototype.getTickettypeid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.EventTicketAnalyticsFilter} returns this
 */
proto.io.EventTicketAnalyticsFilter.prototype.setTickettypeid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string ticketTypeUid = 2;
 * @return {string}
 */
proto.io.EventTicketAnalyticsFilter.prototype.getTickettypeuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.EventTicketAnalyticsFilter} returns this
 */
proto.io.EventTicketAnalyticsFilter.prototype.setTickettypeuid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string venueId = 3;
 * @return {string}
 */
proto.io.EventTicketAnalyticsFilter.prototype.getVenueid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.EventTicketAnalyticsFilter} returns this
 */
proto.io.EventTicketAnalyticsFilter.prototype.setVenueid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string venueUid = 4;
 * @return {string}
 */
proto.io.EventTicketAnalyticsFilter.prototype.getVenueuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.EventTicketAnalyticsFilter} returns this
 */
proto.io.EventTicketAnalyticsFilter.prototype.setVenueuid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string eventId = 5;
 * @return {string}
 */
proto.io.EventTicketAnalyticsFilter.prototype.getEventid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.EventTicketAnalyticsFilter} returns this
 */
proto.io.EventTicketAnalyticsFilter.prototype.setEventid = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * @enum {number}
 */
proto.io.Period = {
  DAY: 0,
  MONTH: 1,
  YEAR: 2
};

goog.object.extend(exports, proto.io);
